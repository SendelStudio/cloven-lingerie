// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8PwgGRpqC1sfX2e6Md5Z7h
// Component: bT3xLuWQ-v3c

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import VSpacing from "../../VSpacing"; // plasmic-import: iQLRvMo3zErj/component
import NavBarItem from "../../NavBarItem"; // plasmic-import: pP-5YKt11Z56/component
import Divider from "../../Divider"; // plasmic-import: kyBXXGdQjkoK/component
import NavBarToggleBars from "../../NavBarToggleBars"; // plasmic-import: xi8_zROhSrDY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8PwgGRpqC1sfX2e6Md5Z7h/projectcss
import sty from "./PlasmicNavBarFull.module.css"; // plasmic-import: bT3xLuWQ-v3c/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: A0mBovv-5T0y/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: LJ1h4t1-wYuW/icon

createPlasmicElementProxy;

export type PlasmicNavBarFull__VariantMembers = {
  menuOpenVariant: "menuOpenVariant";
};
export type PlasmicNavBarFull__VariantsArgs = {
  menuOpenVariant?: SingleBooleanChoiceArg<"menuOpenVariant">;
};
type VariantPropType = keyof PlasmicNavBarFull__VariantsArgs;
export const PlasmicNavBarFull__VariantProps = new Array<VariantPropType>(
  "menuOpenVariant"
);

export type PlasmicNavBarFull__ArgsType = {};
type ArgPropType = keyof PlasmicNavBarFull__ArgsType;
export const PlasmicNavBarFull__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBarFull__OverridesType = {
  topnavplaceholder?: Flex__<"nav">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  vSpacing?: Flex__<typeof VSpacing>;
  toggleWrapper?: Flex__<"div">;
  menuToggleBars?: Flex__<typeof NavBarToggleBars>;
};

export interface DefaultNavBarFullProps {
  menuOpenVariant?: SingleBooleanChoiceArg<"menuOpenVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBarFull__RenderFunc(props: {
  variants: PlasmicNavBarFull__VariantsArgs;
  args: PlasmicNavBarFull__ArgsType;
  overrides: PlasmicNavBarFull__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuOpenVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.menuOpenVariant
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <nav
      data-plasmic-name={"topnavplaceholder"}
      data-plasmic-override={overrides.topnavplaceholder}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.topnavplaceholder,
        {
          [sty.topnavplaceholdermenuOpenVariant]: hasVariant(
            $state,
            "menuOpenVariant",
            "menuOpenVariant"
          )
        }
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        aria-label={"\u56de\u9996\u9801"}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        platform={"nextjs"}
        title={"\u56de\u9996\u9801"}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"eager"}
          src={{
            src: "/plasmic/cloven/images/image18.svg",
            fullWidth: 128.333,
            fullHeight: 49.677,
            aspectRatio: 2.58
          }}
        />
      </PlasmicLink__>
      <div className={classNames(projectcss.all, sty.freeBox__eUz71)}>
        <div className={classNames(projectcss.all, sty.freeBox__oBDuB)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__agZa3
            )}
          >
            {"CIRCULAR"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wghV
            )}
          >
            {"DESIGN"}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__hjWWb, {
          [sty.freeBoxmenuOpenVariant__hjWWbn4W6C]: hasVariant(
            $state,
            "menuOpenVariant",
            "menuOpenVariant"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xbGt, {
            [sty.freeBoxmenuOpenVariant__xbGtn4W6C]: hasVariant(
              $state,
              "menuOpenVariant",
              "menuOpenVariant"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cmbR, {
              [sty.freeBoxmenuOpenVariant__cmbRn4W6C]: hasVariant(
                $state,
                "menuOpenVariant",
                "menuOpenVariant"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___4UVzu, {
                [sty.freeBoxmenuOpenVariant___4UVzun4W6C]: hasVariant(
                  $state,
                  "menuOpenVariant",
                  "menuOpenVariant"
                )
              })}
            >
              <VSpacing
                data-plasmic-name={"vSpacing"}
                data-plasmic-override={overrides.vSpacing}
                className={classNames("__wab_instance", sty.vSpacing)}
                vSpacing={"v232"}
              />

              <NavBarItem
                className={classNames("__wab_instance", sty.navBarItem__fxKo9, {
                  [sty.navBarItemmenuOpenVariant__fxKo9N4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                {"\u9996\u9801"}
              </NavBarItem>
              <Divider
                className={classNames("__wab_instance", sty.divider__fcbD7)}
              />

              <NavBarItem
                className={classNames("__wab_instance", sty.navBarItem__dzUyf, {
                  [sty.navBarItemmenuOpenVariant__dzUyfn4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                {"\u6848\u4f8b\u8f2f"}
              </NavBarItem>
              <Divider
                className={classNames("__wab_instance", sty.divider__lgzis)}
              />

              <NavBarItem
                className={classNames("__wab_instance", sty.navBarItem__mdoJk, {
                  [sty.navBarItemmenuOpenVariant__mdoJkn4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                {"\u670d\u52d9"}
              </NavBarItem>
              <Divider
                className={classNames("__wab_instance", sty.divider__m6YVu)}
              />

              <NavBarItem
                className={classNames("__wab_instance", sty.navBarItem__hyNSm, {
                  [sty.navBarItemmenuOpenVariant__hyNSmn4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                {"\u793e\u7fa4"}
              </NavBarItem>
              <Divider
                className={classNames("__wab_instance", sty.divider__y8KbX)}
              />

              <NavBarItem
                className={classNames("__wab_instance", sty.navBarItem__j3Rvz, {
                  [sty.navBarItemmenuOpenVariant__j3Rvzn4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                {"\u6253\u62db\u547c"}
              </NavBarItem>
              <Divider
                className={classNames("__wab_instance", sty.divider__mQrHs)}
              />
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__j02YN)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aQyP)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__glksu
                  )}
                >
                  {
                    "\u7f8e\u597d\u7684\u4e8b\u90fd\u662f\u8a0e\u8ad6\u51fa\u4f86\u7684\uff0c\n\u804a\u804a\u4f60\u7684\u5faa\u74b0\u60f3\u6cd5\u6216\u4e8b\u696d\u5427\uff01"
                  }
                </div>
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__p6Not, {
                  [sty.freeBoxmenuOpenVariant__p6NoTn4W6C]: hasVariant(
                    $state,
                    "menuOpenVariant",
                    "menuOpenVariant"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tOaJd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iVm1M,
                      {
                        [sty.textmenuOpenVariant__iVm1Mn4W6C]: hasVariant(
                          $state,
                          "menuOpenVariant",
                          "menuOpenVariant"
                        )
                      }
                    )}
                  >
                    {"\u806f\u7d61\u6211\u5011"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Xv1J, {
                      [sty.freeBoxmenuOpenVariant___0Xv1Jn4W6C]: hasVariant(
                        $state,
                        "menuOpenVariant",
                        "menuOpenVariant"
                      )
                    })}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__a9M6R, {
                        [sty.svgmenuOpenVariant__a9M6Rn4W6C]: hasVariant(
                          $state,
                          "menuOpenVariant",
                          "menuOpenVariant"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__aTiuf, {
                    [sty.freeBoxmenuOpenVariant__aTiuFn4W6C]: hasVariant(
                      $state,
                      "menuOpenVariant",
                      "menuOpenVariant"
                    )
                  })}
                >
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__h3CPc, {
                      [sty.svgmenuOpenVariant__h3CPcn4W6C]: hasVariant(
                        $state,
                        "menuOpenVariant",
                        "menuOpenVariant"
                      )
                    })}
                    role={"img"}
                  />
                </div>
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"toggleWrapper"}
          data-plasmic-override={overrides.toggleWrapper}
          className={classNames(projectcss.all, sty.toggleWrapper, {
            [sty.toggleWrappermenuOpenVariant]: hasVariant(
              $state,
              "menuOpenVariant",
              "menuOpenVariant"
            )
          })}
        >
          <NavBarToggleBars
            data-plasmic-name={"menuToggleBars"}
            data-plasmic-override={overrides.menuToggleBars}
            className={classNames("__wab_instance", sty.menuToggleBars, {
              [sty.menuToggleBarsmenuOpenVariant]: hasVariant(
                $state,
                "menuOpenVariant",
                "menuOpenVariant"
              )
            })}
          />
        </div>
      </div>
    </nav>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  topnavplaceholder: [
    "topnavplaceholder",
    "link",
    "img",
    "vSpacing",
    "toggleWrapper",
    "menuToggleBars"
  ],
  link: ["link", "img"],
  img: ["img"],
  vSpacing: ["vSpacing"],
  toggleWrapper: ["toggleWrapper", "menuToggleBars"],
  menuToggleBars: ["menuToggleBars"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  topnavplaceholder: "nav";
  link: "a";
  img: typeof PlasmicImg__;
  vSpacing: typeof VSpacing;
  toggleWrapper: "div";
  menuToggleBars: typeof NavBarToggleBars;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBarFull__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBarFull__VariantsArgs;
    args?: PlasmicNavBarFull__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBarFull__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBarFull__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBarFull__ArgProps,
          internalVariantPropNames: PlasmicNavBarFull__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBarFull__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "topnavplaceholder") {
    func.displayName = "PlasmicNavBarFull";
  } else {
    func.displayName = `PlasmicNavBarFull.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBarFull = Object.assign(
  // Top-level PlasmicNavBarFull renders the root element
  makeNodeComponent("topnavplaceholder"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    vSpacing: makeNodeComponent("vSpacing"),
    toggleWrapper: makeNodeComponent("toggleWrapper"),
    menuToggleBars: makeNodeComponent("menuToggleBars"),

    // Metadata about props expected for PlasmicNavBarFull
    internalVariantProps: PlasmicNavBarFull__VariantProps,
    internalArgProps: PlasmicNavBarFull__ArgProps
  }
);

export default PlasmicNavBarFull;
/* prettier-ignore-end */
