// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8PwgGRpqC1sfX2e6Md5Z7h

import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { EmbedCss } from "@plasmicpkgs/plasmic-embed-css";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { ParallaxProviderWrapper } from "@plasmicpkgs/react-scroll-parallax";
import { CmsCredentialsProvider } from "@plasmicpkgs/plasmic-cms";

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  embedCssProps?: Partial<
    Omit<React.ComponentProps<typeof EmbedCss>, "children">
  >;

  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;

  parallaxProviderWrapperProps?: Partial<
    Omit<React.ComponentProps<typeof ParallaxProviderWrapper>, "children">
  >;

  cmsCredentialsProviderProps?: Partial<
    Omit<React.ComponentProps<typeof CmsCredentialsProvider>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    embedCssProps,
    antdConfigProviderProps,
    parallaxProviderWrapperProps,
    cmsCredentialsProviderProps
  } = props;

  return (
    <EmbedCss
      {...embedCssProps}
      css={
        embedCssProps && "css" in embedCssProps
          ? embedCssProps.css!
          : "@font-face {\r\n  font-family: 'Rossanova Bold';\r\n  src: url('https://site-assets.plasmic.app/97c449fd376201bd225f36fe25b22dd7.otf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Rossanova Black';\r\n  src: url('https://site-assets.plasmic.app/869d4855b07f3cabb3d93ebf52e962de.otf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Helvetica Neue Light';\r\n  src: url('https://site-assets.plasmic.app/35321a782a3cbb7f9cc0353450a7145e.otf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Rossanova Regular';\r\n  src: url('https://site-assets.plasmic.app/237fbba4f2f08b91a82748d79caf4c6a.otf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Gilroy Medium';\r\n  src: url('https://site-assets.plasmic.app/c83281ae1ca703d0741a770ee7e7c091.ttf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Gilroy Regular';\r\n  src: url('https://site-assets.plasmic.app/31ff7c1a62a300dbbf9656b4ba14a0d5.ttf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Gilroy Light';\r\n  src: url('https://site-assets.plasmic.app/4b236c6cb4c59d66b80dde6f9c614ebd.ttf');\r\n}\r\n\r\n\r\n@font-face {\r\n  font-family: 'Gilroy Ultra Light';\r\n  src: url('https://site-assets.plasmic.app/f5bd9c00f2cc7353bfc80031dd5d9394.ttf');\r\n}\r\n\r\n\r\n@font-face {\r\n font-family: 'Helvetica Neue Thin';\r\n src: url('https://site-assets.plasmic.app/8625837a60ad14e4715c2908647e1342.otf');\r\n}\r\n\r\n\r\n@font-face {\r\n font-family: 'Helvetica Neue UltraLight';\r\n src: url('https://site-assets.plasmic.app/5317c1455a445e0b6069cf091c4dd64d.ttf');\r\n}\r\n\r\n\r\n@font-face {\r\n font-family:  'Gotham Light';\r\n src: url('https://site-assets.plasmic.app/abecb72d9dfe0232c072f0e0f95c4dec.otf');\r\n}]\r\n/* CSS snippet/"
      }
    >
      <AntdConfigProvider
        {...antdConfigProviderProps}
        borderRadius={
          antdConfigProviderProps && "borderRadius" in antdConfigProviderProps
            ? antdConfigProviderProps.borderRadius!
            : 6
        }
        colorBgBase={
          antdConfigProviderProps && "colorBgBase" in antdConfigProviderProps
            ? antdConfigProviderProps.colorBgBase!
            : "#ffffff"
        }
        colorError={
          antdConfigProviderProps && "colorError" in antdConfigProviderProps
            ? antdConfigProviderProps.colorError!
            : "#ff4d4f"
        }
        colorInfo={
          antdConfigProviderProps && "colorInfo" in antdConfigProviderProps
            ? antdConfigProviderProps.colorInfo!
            : "#1677ff"
        }
        colorPrimary={
          antdConfigProviderProps && "colorPrimary" in antdConfigProviderProps
            ? antdConfigProviderProps.colorPrimary!
            : "#1677ff"
        }
        colorSuccess={
          antdConfigProviderProps && "colorSuccess" in antdConfigProviderProps
            ? antdConfigProviderProps.colorSuccess!
            : "#52c41a"
        }
        colorWarning={
          antdConfigProviderProps && "colorWarning" in antdConfigProviderProps
            ? antdConfigProviderProps.colorWarning!
            : "#faad14"
        }
        controlHeight={
          antdConfigProviderProps && "controlHeight" in antdConfigProviderProps
            ? antdConfigProviderProps.controlHeight!
            : 32
        }
        defaultDark={
          antdConfigProviderProps && "defaultDark" in antdConfigProviderProps
            ? antdConfigProviderProps.defaultDark!
            : false
        }
        lineWidth={
          antdConfigProviderProps && "lineWidth" in antdConfigProviderProps
            ? antdConfigProviderProps.lineWidth!
            : 1
        }
        loadingText={
          antdConfigProviderProps && "loadingText" in antdConfigProviderProps
            ? antdConfigProviderProps.loadingText!
            : undefined
        }
        removeLoading={
          antdConfigProviderProps && "removeLoading" in antdConfigProviderProps
            ? antdConfigProviderProps.removeLoading!
            : undefined
        }
        sizeStep={
          antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
            ? antdConfigProviderProps.sizeStep!
            : 4
        }
        sizeUnit={
          antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
            ? antdConfigProviderProps.sizeUnit!
            : 4
        }
        themeStyles={
          antdConfigProviderProps && "themeStyles" in antdConfigProviderProps
            ? antdConfigProviderProps.themeStyles!
            : true
            ? {
                fontFamily: "Inter",
                fontSize: "16px",
                fontWeight: "400",
                lineHeight: "1.5",
                color: "#535353",
                letterSpacing: "normal"
              }
            : undefined
        }
        wireframe={
          antdConfigProviderProps && "wireframe" in antdConfigProviderProps
            ? antdConfigProviderProps.wireframe!
            : false
        }
      >
        <ParallaxProviderWrapper
          {...parallaxProviderWrapperProps}
          scrollAxis={
            parallaxProviderWrapperProps &&
            "scrollAxis" in parallaxProviderWrapperProps
              ? parallaxProviderWrapperProps.scrollAxis!
              : undefined
          }
        >
          <CmsCredentialsProvider
            {...cmsCredentialsProviderProps}
            databaseId={
              cmsCredentialsProviderProps &&
              "databaseId" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.databaseId!
                : undefined
            }
            databaseToken={
              cmsCredentialsProviderProps &&
              "databaseToken" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.databaseToken!
                : undefined
            }
            host={
              cmsCredentialsProviderProps &&
              "host" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.host!
                : "https://data.plasmic.app"
            }
            locale={
              cmsCredentialsProviderProps &&
              "locale" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.locale!
                : undefined
            }
          >
            {children}
          </CmsCredentialsProvider>
        </ParallaxProviderWrapper>
      </AntdConfigProvider>
    </EmbedCss>
  );
}
