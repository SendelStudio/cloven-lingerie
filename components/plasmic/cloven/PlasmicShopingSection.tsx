// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8PwgGRpqC1sfX2e6Md5Z7h
// Component: C0diV7QTaN2i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsikbnv5YY9ZVd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ikbnv5yY9zVD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8PwgGRpqC1sfX2e6Md5Z7h/projectcss
import sty from "./PlasmicShopingSection.module.css"; // plasmic-import: C0diV7QTaN2i/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 8XZagzvfHnMV/icon

createPlasmicElementProxy;

export type PlasmicShopingSection__VariantMembers = {};
export type PlasmicShopingSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopingSection__VariantsArgs;
export const PlasmicShopingSection__VariantProps = new Array<VariantPropType>();

export type PlasmicShopingSection__ArgsType = {};
type ArgPropType = keyof PlasmicShopingSection__ArgsType;
export const PlasmicShopingSection__ArgProps = new Array<ArgPropType>();

export type PlasmicShopingSection__OverridesType = {
  root?: Flex__<"section">;
  container433?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  h2?: Flex__<"h2">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultShopingSectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopingSection__RenderFunc(props: {
  variants: PlasmicShopingSection__VariantsArgs;
  args: PlasmicShopingSection__ArgsType;
  overrides: PlasmicShopingSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsikbnv5YY9ZVd()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"container433"}
        data-plasmic-override={overrides.container433}
        hasGap={true}
        className={classNames(projectcss.all, sty.container433)}
      >
        <div className={classNames(projectcss.all, sty.column___25TCa)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"A new shopping \nexperience"}
            </h2>
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Explore products"}
              </div>
              <Icon8Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </Stack__>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__mgb5O)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"661px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"783px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/cloven/images/image20.png",
              fullWidth: 1200,
              fullHeight: 1508,
              aspectRatio: undefined
            }}
          />
        </div>
      </Stack__>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "container433", "freeBox", "h2", "link", "text", "svg", "img"],
  container433: ["container433", "freeBox", "h2", "link", "text", "svg", "img"],
  freeBox: ["freeBox", "h2", "link", "text", "svg"],
  h2: ["h2"],
  link: ["link", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  container433: "div";
  freeBox: "div";
  h2: "h2";
  link: "a";
  text: "div";
  svg: "svg";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopingSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopingSection__VariantsArgs;
    args?: PlasmicShopingSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopingSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShopingSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopingSection__ArgProps,
          internalVariantPropNames: PlasmicShopingSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopingSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopingSection";
  } else {
    func.displayName = `PlasmicShopingSection.${nodeName}`;
  }
  return func;
}

export const PlasmicShopingSection = Object.assign(
  // Top-level PlasmicShopingSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container433: makeNodeComponent("container433"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicShopingSection
    internalVariantProps: PlasmicShopingSection__VariantProps,
    internalArgProps: PlasmicShopingSection__ArgProps
  }
);

export default PlasmicShopingSection;
/* prettier-ignore-end */
